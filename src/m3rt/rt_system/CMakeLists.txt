cmake_minimum_required(VERSION 2.8)
project(rt_system C CXX)
set(LIBNAME "rt_system")

OPTION(RTAI "Enable/Disable RTAI (used for python proxy users only)" ON)
OPTION(ROS "Enable/Disable ROS" OFF)

message("RTAI:${RTAI}")
message("ROS:${ROS}")
INCLUDE_DIRECTORIES(${M3RT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}../base)

#set(CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb")
#set(CMAKE_CXX_FLAGS_RELEASE "-O3")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
if(RTAI)
add_definitions(-D__RTAI__)
find_package(RTAI REQUIRED)
endif(RTAI)

if(ROS)
add_definitions(-D_ROS_)
###find_package(RTAI REQUIRED)
endif(ROS)



find_package(Threads)
find_package(YamlCpp 0.3 REQUIRED)
#find_package(M3 COMPONENTS HARDWARE ROBOTS CHAINS TOOLBOX SHARED_MEM REQUIRED)
#find_package(M3rt REQUIRED )
#find_package(Boost COMPONENTS filesystem system REQUIRED)
#find_package(Eigen3 REQUIRED)
find_package(Protobuf REQUIRED)

SET(LIBS ${YAMLCPP_LIBRARY} ${PROTOBUF_LIBRARIES} ${RTAI_LIBRARIES} ${M3RT_LIBRARIES} pthread ${Boost_LIBRARIES} ${EIGEN3_LIBRARIES} m3base)
include_directories(${YAMLCPP_INCLUDE_DIR} ${M3RT_INCLUDE_DIR} ${RTAI_INCLUDE_DIR} ${THREADS_INCLUDE_DIR} ${EIGEN3_INCLUDE_DIR} ${PROTOBUF_INCLUDE_DIRS})


# Swig
FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})
FIND_PACKAGE(PythonLibs REQUIRED)
find_package ( PythonInterp REQUIRED ) 

INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
SET(CMAKE_SWIG_FLAGS "")
SET_SOURCE_FILES_PROPERTIES(m3rt_system.i PROPERTIES CPLUSPLUS ON)
#(CMAKE_SWIG_OUTDIR ${CMAKE_CURRENT_SOURCE_DIR}/../../../python/m3/) # HACK for the path
####install(FILES ${CMAKE_BINARY_DIR}/src/target.py DESTINATION ${PYTHON_DIST_PACKAGES}/m3) #### TO TRY

SWIG_ADD_MODULE(m3rt_system python m3rt_system.i rt_system.cpp)

SWIG_LINK_LIBRARIES(m3rt_system ${PYTHON_LIBRARIES})
SWIG_LINK_LIBRARIES(m3rt_system ${LIBNAME})
SWIG_LINK_LIBRARIES(m3rt_system ${LIBS})
set_target_properties(_m3rt_system PROPERTIES LINKER_LANGUAGE CXX)
# End Swig
# Start Protobuf stuff
#include_directories(${PROTOBUF_INCLUDE_DIR} ${M3RT_SOURCE_DIR})
#file(GLOB ProtoFiles "${CMAKE_CURRENT_SOURCE_DIR}/*.proto" )
#if(ProtoFiles)	     
#	PROTOBUF_GENERATE_CPP(ProtoSources ProtoHeaders ${CMAKE_CURRENT_SOURCE_DIR} ${ProtoFiles})
#endif(Protofiles)
# End Protobuf stuff

## Get all the files sources and headers
file(GLOB ALL_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} [^.]*.cpp)
file(GLOB ALL_HDRS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} [^.]*.h)

if(NOT ROS)
message("Removing ROS stuff")
FILE(GLOB ROS_STUFF RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*_ros_*")
message("ros stuff to remove : ${ROS_STUFF}")
list(REMOVE_ITEM ALL_SRCS ${ROS_STUFF})
list(REMOVE_ITEM ALL_HDRS ${ROS_STUFF})
endif(NOT ROS)

list(APPEND ALL_SRCS ${ProtoSources})


file(GLOB ProtoFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.proto )
list(APPEND ALL_HDRS
${ProtoHeaders}
${ProtoFiles}
)

message("ALL SRC in ${PROJECT_NAME}:${ALL_SRCS}")


## Building
add_library(${LIBNAME} SHARED ${ALL_SRCS})
set_target_properties(${LIBNAME} PROPERTIES PREFIX "")
target_link_libraries(${LIBNAME} ${LIBS})
set_target_properties(${LIBNAME} PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(${LIBNAME} PROPERTIES COMPILE_FLAGS "-I${CMAKE_BINARY_DIR}/src")

#SET_TARGET_PROPERTIES( ${LIBNAME} PROPERTIES COMPILE_FLAGS -fPIC)
execute_process ( 
   COMMAND ${PYTHON_EXECUTABLE} -c 
   	"import site, sys; sys.stdout.write(site.PREFIXES[-1])" 
   OUTPUT_VARIABLE PYTHON_PREFIX 
) 
file ( TO_CMAKE_PATH "${PYTHON_PREFIX}" PYTHON_PREFIX ) 
execute_process ( 
   COMMAND ${PYTHON_EXECUTABLE} -c 
   	"import site, sys; sys.stdout.write(site.getsitepackages()[-1])" 
   OUTPUT_VARIABLE PYTHON_SITE_DIR 
) 
file ( TO_CMAKE_PATH "${PYTHON_SITE_DIR}" PYTHON_SITE_DIR ) 
string ( REGEX REPLACE "^${PYTHON_PREFIX}/" "" 
   PYTHON_SITE_DIR "${PYTHON_SITE_DIR}" 
) 
message("Swig file out : ${SWIG_MODULE_m3rt_system_REAL_NAME}")
## Installation
install ( TARGETS ${SWIG_MODULE_m3rt_system_REAL_NAME} ${LIBNAME}
   LIBRARY 
     DESTINATION ${PYTHON_SITE_DIR}/m3/ 
     COMPONENT library 
) 

install ( FILES ${CMAKE_CURRENT_BINARY_DIR}/m3rt_system.py 
   DESTINATION ${PYTHON_SITE_DIR}/m3/
   COMPONENT library 
) 



install(TARGETS ${LIBNAME} DESTINATION lib)
install(FILES ${ALL_HDRS} DESTINATION include/m3rt/${PROJECT_NAME})
#install(TARGETS _m3rt_system DESTINATION lib COMPONENT ${LIBNAME} )
#install(TARGETS ${LIBNAME} DESTINATION lib)
#install(FILES m3enscontroller.h m3enscontroller.pb.h DESTINATION include/m3ens/controllers)
########### next target ###############



#file(WRITE dummy.cpp "//autogenerated file by cmake\n")
#add_library(m3base SHARED ${m3base_LIB_SRCS})

#target_link_libraries(m3base)

#set_target_properties(m3base PROPERTIES VERSION 4.2.0 SOVERSION 4)
#install(TARGETS m3base DESTINATION lib)


########### install files ###############

#install(FILES  toolbox.h  	simple_server.h  	component_factory.h  	component_ec.h  	component.h  	component_base.pb.h  	component_async.h  	component_shm.h  	component_base.proto  	m3rt_def.h  	m3ec_def.h DESTINATION include/m3rt/base)



#original Makefile.am contents follow:

#
## M3 -- Meka Robotics Real-Time Control System
## Copyright (c) 2010 Meka Robotics
## Author: edsinger@mekabot.com (Aaron Edsinger)
## 
## M3 is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## M3 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with M3.  If not, see <http://www.gnu.org/licenses/>.
#
### Process this file with automake to produce Makefile.in
#
#m3_dir = $(top_srcdir)/src
#rtai_inc = $(RTAI_DIR)/include  
#ros_dir = $(ROS_DIR)
#clean-local:
#	rm -f component_base.pb.cpp
#	rm -f component_base.pb.h
#
#proto: component_base.pb.cpp
#
#proto_install: 
#	if test -d $(includedir)/m3rt; then echo '' ; else mkdir $(includedir)/m3rt;fi
#	if test -d $(includedir)/m3rt/base; then echo '' ; else mkdir $(includedir)/m3rt/base;fi
#	cp component_base.proto $(includedir)/m3rt/base 
#
#BUILT_SOURCES = component_base.pb.cpp
#component_base.pb.cpp: component_base.proto
#	protoc -I./ --cpp_out=./ component_base.proto
#	mv component_base.pb.cc component_base.pb.cpp
#	protoc -I./ --python_out=$(top_srcdir)/python/m3rt component_base.proto
#
#libm3baseincludedir = $(includedir)/m3rt/base
#
#libm3baseinclude_HEADERS = \
#	toolbox.h \
#	simple_server.h \
#	component_factory.h \
#	component_ec.h \
#	component.h \
#	component_base.pb.h \
#	component_async.h \
#	component_shm.h \
#	component_base.proto \
#	m3rt_def.h \
#	m3ec_def.h
#
#if RTAI
#RT = -D__RTAI__
#else
#RT = 
#endif
#
#if RTAI
#LRT = -llxrt
#else
#LRT = 
#endif
#
#if RTAI
#libm3base_la_SOURCES = \
#	component_base.pb.cpp\
#	toolbox.cpp \
#	simple_server.cpp \
#	component_factory.cpp \
#	component_ec.cpp \
#	component.cpp 	\
#	component_async.cpp\
#	component_shm.cpp
#else
#libm3base_la_SOURCES = \
#	component_base.pb.cpp\
#	toolbox.cpp \
#	simple_server.cpp \
#	component_factory.cpp \
#	component_ec.cpp \
#	component.cpp
#endif
#	
#lib_LTLIBRARIES = libm3base.la 
#
#libm3base_la_LIBADD = \
#	$(PROTOBUF_LIBS) \
#	$(YAMLCPP_LIBS) \
#	$(LRT)
#
#libm3base_la_LDFLAGS = -version-info 1:0:0 -module \
#	-L$(RTAI_DIR)/lib \
#	-L$(ros_dir)/lib
#	
#libm3base_la_CPPFLAGS =  -shared -I$(m3_dir) -Wl,-E -ffast-math -pipe -mhard-float\
#	-I$(rtai_inc) \
#	$(RT)\
#	-I$(ros_dir)/include
# 
########### install files ###############

#install(FILES  rt_data_service.h  	rt_log_service.h  	rt_ros_service.h  	rt_service.h  	rt_system.h DESTINATION include/m3rt/rt_system)



#original Makefile.am contents follow:

## M3 -- Meka Robotics Real-Time Control System
## Copyright (c) 2010 Meka Robotics
## Author: edsinger@mekabot.com (Aaron Edsinger)
## 
## M3 is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## M3 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with M3.  If not, see <http://www.gnu.org/licenses/>.
#
### Process this file with automake to produce Makefile.in
#
##//////////////////////////////////////////////////////////////////
#
#m3_dir = $(top_srcdir)/src
#rtai_inc = $(RTAI_DIR)/include  
#ros_dir = $(ROS_DIR)
#
#EXTRA_DIST = \
#	rt_system.h \
#	rt_service.h \
#	rt_data_service.h \
#	rt_log_service.h \
#	rt_ros_service.h \
#	m3rt_system.i
#  
#clean-local:
#	rm -f m3rt_system_wrap.cpp
#	
#_m3rt_system_la_includedir = $(includedir)/m3rt/rt_system
#_m3rt_system_la_include_HEADERS = \
#	rt_data_service.h \
#	rt_log_service.h \
#	rt_ros_service.h \
#	rt_service.h \
#	rt_system.h
#
#
##lib_LTLIBRARIES = libm3rt_system.la
#BUILT_SOURCES = m3rt_system_wrap.cpp 
#pkgpython_PYTHON = m3rt_system.py 
#pkgpyexec_LTLIBRARIES = _m3rt_system.la 
#
#_m3rt_system_la_SOURCES = \
#	rt_service.cpp \
#	rt_system.cpp \
#	rt_data_service.cpp \
#	rt_log_service.cpp \
#	m3rt_system_wrap.cpp \
#	m3rt_system.i 
#
#if RTAI
#RT = -D__RTAI__
#else
#RT = 
#endif
#
#if RTAI
#LRT = -llxrt
#else
#LRT = 
#endif
#	
#_m3rt_system_la_CPPFLAGS = -shared\
#	-pipe -msse2 -ffast-math -mhard-float \
#	$(RT) \
#	$(SWIG_PYTHON_CPPFLAGS) \
#	$(ETHERCAT_CFLAGS) \
#	-I$(m3_dir) \
#	-I$(rtai_inc) \
#	-I$(ros_dir)/include
#	
#	
#_m3rt_system_la_LDFLAGS = -module -version-info 1:1:0 -mhard-float \
#	-L$(RTAI_DIR)/lib \
#	-L$(top_srcdir)/src/m3rt/base \
#	-L$(ros_dir)/lib
#	
#
#_m3rt_system_la_LIBADD = $(LRT) $(PROTOBUF_LIBS) $(YAMLCPP_LIBS) -lm3base -lpthread
#
#m3rt_system_wrap.cpp : m3rt_system.i
#	$(SWIG) $(SWIG_PYTHON_OPT) -o $@ -I$(m3_dir) $<
#	
